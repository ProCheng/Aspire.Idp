@model EditViewModel
@{

}

<div id="app">
    <div class="login_right">
        <el-card shadow="always" class="login_box">
            <el-tabs v-model="actionName">
                <el-tab-pane label="编辑用户" name="编辑用户">
                    <el-form :model="form" label-width="120px" style="margin-top: 30px;" ref="formRef" :rules="rules">

                        <el-form-item label="喜欢的动漫">
                            <el-input disabled v-model="form.FirstQuestion" ref="FirstQuestion"></el-input>
                        </el-form-item>
                        <el-form-item label="喜欢的名著">
                            <el-input disabled v-model="form.SecondQuestion" ref="SecondQuestion"></el-input>
                        </el-form-item>

                        <el-form-item prop="RealName" label="真实姓名">
                            <el-input v-model="form.RealName" placeholder="真实姓名" v-on:keyup.enter="$refs.UserName.focus()"></el-input>
                        </el-form-item>
                        <el-form-item prop="UserName" label="用户名">
                            <el-input v-model="form.UserName" placeholder="用户名" ref="UserName" v-on:keyup.enter="$refs.LoginName.focus()"></el-input>
                        </el-form-item>

                        <el-form-item prop="LoginName" label="登录名">
                            <el-input v-model="form.LoginName" placeholder="登录名" ref="LoginName" v-on:keyup.enter="$refs.Email.focus()"></el-input>
                        </el-form-item>

                        <el-form-item prop="Email" label="邮箱">
                            <el-input v-model="form.Email" placeholder="邮箱" ref="Email" v-on:keyup.enter="$refs.Password.focus()"></el-input>
                        </el-form-item>

                        <div style="text-align: right;margin-top: 40px">
                            <el-button type="primary" v-on:click="submit">确定</el-button>
                            <el-button v-on:click="back">返回</el-button>
                        </div>
                    </el-form>


                </el-tab-pane>
                <el-tab-pane label="基础信息" name="基础信息">

                    @Html.AntiForgeryToken()
                    @{
                        foreach (var item in Model.Claims)
                        {
                            <p><el-text type="info">@item</el-text></p>
                        }
                    }
                </el-tab-pane>
            </el-tabs>

        </el-card>
    </div>
</div>

<script>
    const App = {
        data() {
            return {
                actionName: "编辑用户",
                rules: {
                    RealName: [
                        {
                            required: true,
                            message: '真实姓名不能为空',
                            trigger: 'change',
                        },
                    ],
                    UserName: [
                        {
                            required: true,
                            message: '用户名不能为空',
                            trigger: 'change',
                        },
                    ],
                    LoginName: [
                        {
                            required: true,
                            message: '登录名不能为空',
                            trigger: 'change',
                        },
                    ],
                    Email: [
                        {
                            required: true,
                            validator: (rule, value, callback) => {

                                const emailRegex = /^[^\s@@]+@@[^\s@@]+\.[^\s@@]+$/;
                                if (emailRegex.test(value)) {
                                    callback(); // 校验通过
                                } else {
                                    callback(new Error('请输入有效的邮箱地址')); // 校验失败
                                }
                            },
                            trigger: 'change'
                        },
                    ]
                },
                form: {
                    RealName: Tools.DecodeHtml("@Model.RealName"),
                    UserName: Tools.DecodeHtml("@Model.UserName"),
                    LoginName: Tools.DecodeHtml("@Model.LoginName"),
                    Email: Tools.DecodeHtml("@Model.Email"),

                    FirstQuestion: Tools.DecodeHtml("@Model.FirstQuestion"),
                    SecondQuestion: Tools.DecodeHtml("@Model.SecondQuestion"),
                }
            }
        },
        methods: {
            submit() {
                this.$refs.formRef.validate(async (valid) => {
                    if (valid) {
                        let res = await axios.put('/account/edit/' + @Model.Id, {
                            ...this.form,
                        });
                        ElementPlus.ElMessage({
                            message: "更新成功",
                            type: 'success',
                        })
                        window.location.href = res.data;
                    } else {
                        return false
                    }
                })
            },
            back() {
                window.history.go(-1)
            }
        }
    };
    const app = Vue.createApp(App);
    app.use(ElementPlus);
    app.mount("#app");
</script>

<style>
    #app {
        height: 100%;
        display: flex;
    }
    .login_right {
        padding: 10px 20px;
        flex: 1;
    }
    /* 登录小容器 */
    .login_box {
        box-sizing: border-box;
        width: 480px;
        border-radius: 15px;
        box-shadow: 0 20px 50px 0 hsl(0deg 0% 64% / 29%);
        margin: 10px auto 0;
        padding: 25px 30px;
    }
</style>
